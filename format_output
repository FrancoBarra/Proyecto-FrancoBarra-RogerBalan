.data
    output_buffer: .space 34 # 1 (signo) + 8 (exponente) + 23 (mantisa) + 2 (espacios) + null

.text
format_output:
    # $a0 apunta al output_buffer
    # La salida formateada se almacena en el mismo buffer

    # Mostrar el signo
    lb $t0, ($a0) # Cargar el signo
    li $t1, '0'
    beq $t0, 0, print_zero
    li $t1, '1'
print_zero:
    sb $t1, ($a0) # Almacenar el signo como '0' o '1'
    addi $a0, $a0, 1

    # Mostrar el exponente
    li $t2, 8 # 8 bits del exponente
loop_exponent_print:
    beqz $t2, print_space1
    lb $t3, ($a0)
    sb $t3, ($a0)
    addi $a0, $a0, 1
    subi $t2, $t2, 1
    j loop_exponent_print

print_space1:
    li $t4, 32 # Espacio ASCII
    sb $t4, ($a0)
    addi $a0, $a0, 1

    # Mostrar la mantisa
    li $t5, 23 # 23 bits de la mantisa
loop_mantissa_print:
    beqz $t5, print_space2
    lb $t6, ($a0)
    sb $t6, ($a0)
    addi $a0, $a0, 1
    subi $t5, $t5, 1
    j loop_mantissa_print

print_space2:
    li $t4, 32 # Espacio ASCII
    sb $t4, ($a0)
    addi $a0, $a0, 1

    # Agregar el terminador nulo
    li $t7, 0
    sb $t7, ($a0)
    jr $ra
