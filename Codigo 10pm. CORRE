.data
    prompt:         .asciiz "Introduce un numero en formato decimal o hexadecimal: "
    invalid_input:  .asciiz "Entrada no válida. Inténtalo de nuevo.\n"  # Cadena en .data
    normalized_msg: .asciiz "Número normalizado: "
    sign_msg:       .asciiz "Signo: "
    exponent_msg:   .asciiz "Exponente: "
    mantissa_msg:   .asciiz "Mantisa: "
    ieee754_msg:    .asciiz "Formato IEEE 754: "
    newline:        .asciiz "\n"
    buffer:         .space 32
    sign:           .byte 0
    exponent:       .byte 0
    mantissa:       .word 0

.text
.globl main

main:
    # Bucle principal para pedir una entrada válida
input_loop:
    # Mostrar el mensaje de bienvenida
    li $v0, 4
    la $a0, prompt
    syscall

    # Leer la entrada del usuario
    li $v0, 8
    la $a0, buffer
    li $a1, 32
    syscall

    # Procesar la entrada
    jal process_input

    # Verificar si la entrada es válida
    beq $v0, $zero, invalid_input_error  # Cambiado a invalid_input_error

    # Si la entrada es válida, salir del bucle
    j valid_input

invalid_input_error:  # Etiqueta renombrada para evitar conflicto
    # Mostrar mensaje de error
    li $v0, 4
    la $a0, invalid_input  # Usar la cadena definida en .data
    syscall

    # Volver a pedir una entrada
    j input_loop

valid_input:
    # Normalizar el número
    jal normalize_number

    # Mostrar la representación final
    jal display_representation

    # Salir del programa
    li $v0, 10
    syscall

process_input:
    # Inicializar registros
    la $t0, buffer          # Cargar la dirección del búfer
    li $t1, 0               # Inicializar el signo (0 = positivo, 1 = negativo)
    li $t2, 0               # Inicializar la parte entera
    li $t3, 0               # Inicializar la parte fraccionaria
    li $t4, 10              # Base decimal
    li $t5, 0               # Contador de dígitos fraccionarios
    li $t8, 0               # Bandera para indicar si se encontró un punto decimal
    li $t9, 0               # Bandera para indicar si es hexadecimal
    li $s0, 0               # Contador de dígitos enteros
    li $s1, 0               # Contador de dígitos fraccionarios

    # Leer el primer carácter
    lb $t6, 0($t0)
    beq $t6, '+', positive  # Si es '+', es positivo
    beq $t6, '-', negative  # Si es '-', es negativo
    j check_hex_or_decimal  # Si no hay signo, verificar si es hexadecimal o decimal

positive:
    addi $t0, $t0, 1        # Saltar el signo '+'
    j check_hex_or_decimal

negative:
    li $t1, 1               # Establecer el signo como negativo
    addi $t0, $t0, 1        # Saltar el signo '-'

check_hex_or_decimal:
    lb $t6, 0($t0)
    beq $t6, '.', found_dot  # Si encuentra '.', procesar la parte fraccionaria
    beq $t6, 0, end_process  # Si es el final de la cadena, terminar
    beq $t6, 10, end_process # Si es un salto de línea, terminar

    # Verificar si el carácter es un dígito hexadecimal
    blt $t6, '0', invalid_input_label  # Cambiado a invalid_input_label
    bgt $t6, '9', check_hex_letter      # Si no es un dígito decimal, verificar si es una letra hexadecimal

    # Es un dígito decimal
    j check_digit

check_hex_letter:
    blt $t6, 'A', invalid_input_label  # Cambiado a invalid_input_label
    bgt $t6, 'F', check_hex_lowercase  # Si no es una letra mayúscula, verificar si es minúscula

    # Es una letra mayúscula hexadecimal (A-F)
    li $t9, 1               # Establecer la bandera de hexadecimal
    j process_hex

check_hex_lowercase:
    blt $t6, 'a', invalid_input_label  # Cambiado a invalid_input_label
    bgt $t6, 'f', invalid_input_label  # Cambiado a invalid_input_label

    # Es una letra minúscula hexadecimal (a-f)
    li $t9, 1               # Establecer la bandera de hexadecimal

process_hex:
    # Convertir dígito hexadecimal a valor
    blt $t6, 'A', hex_digit  # Si es un dígito decimal (0-9)
    blt $t6, 'a', hex_upper  # Si es una letra mayúscula (A-F)
    j hex_lower              # Si es una letra minúscula (a-f)

hex_digit:
    sub $t7, $t6, '0'       # Convertir dígito a valor
    j accumulate_hex

hex_upper:
    sub $t7, $t6, 'A'       # Convertir letra mayúscula a valor (A-F)
    addi $t7, $t7, 10       # Sumar 10 para obtener el valor hexadecimal
    j accumulate_hex

hex_lower:
    sub $t7, $t6, 'a'       # Convertir letra minúscula a valor (a-f)
    addi $t7, $t7, 10       # Sumar 10 para obtener el valor hexadecimal

accumulate_hex:
    # Verificar límite de dígitos enteros (5 para hexadecimal)
    addi $s0, $s0, 1        # Incrementar el contador de dígitos enteros
    bgt $s0, 5, invalid_input_label  # Cambiado a invalid_input_label

    sll $t2, $t2, 4         # Desplazar la parte entera 4 bits a la izquierda (multiplicar por 16)
    or $t2, $t2, $t7        # Acumular el valor hexadecimal
    addi $t0, $t0, 1        # Mover al siguiente carácter
    j check_hex_or_decimal

check_digit:
    # Verificar límite de dígitos enteros (6 para decimal)
    addi $s0, $s0, 1        # Incrementar el contador de dígitos enteros
    bgt $s0, 6, invalid_input_label  # Cambiado a invalid_input_label

    # Convertir dígito decimal a valor y acumular
    mul $t2, $t2, $t4       # Multiplicar la parte entera por 10
    sub $t7, $t6, '0'       # Convertir dígito a valor
    add $t2, $t2, $t7       # Acumular en la parte entera
    addi $t0, $t0, 1        # Mover al siguiente carácter
    j check_hex_or_decimal

found_dot:
    addi $t0, $t0, 1        # Saltar el punto '.'
    li $t8, 1               # Indicar que se encontró un punto decimal

process_fraction_loop:
    lb $t6, 0($t0)
    beq $t6, 0, end_process  # Si es el final de la cadena, terminar
    beq $t6, 10, end_process # Si es un salto de línea, terminar
    blt $t6, '0', invalid_input_label  # Cambiado a invalid_input_label
    bgt $t6, '9', invalid_input_label  # Cambiado a invalid_input_label

    # Verificar límite de dígitos fraccionarios (2 para ambos formatos)
    addi $s1, $s1, 1        # Incrementar el contador de dígitos fraccionarios
    bgt $s1, 2, invalid_input_label  # Cambiado a invalid_input_label

    # Convertir dígito a valor y acumular
    mul $t3, $t3, $t4       # Multiplicar la parte fraccionaria por 10
    sub $t7, $t6, '0'       # Convertir dígito a valor
    add $t3, $t3, $t7       # Acumular en la parte fraccionaria
    addi $t0, $t0, 1        # Mover al siguiente carácter
    j process_fraction_loop

invalid_input_label:  # Etiqueta renombrada para evitar conflicto
    # Retornar error
    li $v0, 0
    jr $ra

end_process:
    # Guardar el signo, parte entera y fraccionaria
    sb $t1, sign
    sw $t2, mantissa        # Usar mantissa como almacenamiento temporal
    sw $t3, mantissa + 4    # Guardar la parte fraccionaria

    # Retornar éxito
    li $v0, 1
    jr $ra

normalize_number:
    # Cargar la parte entera y fraccionaria
    lw $t0, mantissa        # Parte entera
    lw $t1, mantissa + 4    # Parte fraccionaria

    # Verificar si el número es cero
    beqz $t0, check_fraction_zero  # Si la parte entera es 0, verificar la fraccionaria

    # Determinar el signo
    bgtz $t0, normalize_positive  # Si el número es positivo, normalizar
    neg $t0, $t0             # Si el número es negativo, convertirlo a positivo
    li $t2, 1                # Establecer el signo como negativo
    sb $t2, sign

normalize_positive:
    # Encontrar el bit más significativo (MSB)
    clz $t3, $t0             # Contar los ceros a la izquierda
    li $t5, 31               # Número total de bits - 1
    sub $t3, $t5, $t3        # Calcular la posición del MSB
    addi $t3, $t3, 127       # Añadir el sesgo de 127
    sb $t3, exponent         # Guardar el exponente

    # Normalizar la mantisa
    li $t6, 23               # Desplazamiento para normalizar la mantisa
    sub $t6, $t6, $t3        # Calcular el desplazamiento necesario
    sllv $t4, $t0, $t6       # Desplazar el número para normalizar la mantisa
    li $t7, 0x007FFFFF       # Máscara para obtener los 23 bits de la mantisa
    and $t4, $t4, $t7        # Aplicar la máscara para obtener la mantisa

    # Guardar la mantisa
    sw $t4, mantissa         # Guardar la mantisa
    j end_normalize

check_fraction_zero:
    # Si la parte entera es 0, verificar la parte fraccionaria
    beqz $t1, end_normalize  # Si ambas partes son 0, terminar
    j normalize_positive     # Si hay parte fraccionaria, normalizar

end_normalize:
    jr $ra
    
display_representation:
    # Mostrar el signo
    li $v0, 4
    la $a0, sign_msg
    syscall
    lb $a0, sign
    li $v0, 1
    syscall
    li $v0, 4
    la $a0, newline
    syscall

    # Mostrar el exponente en binario
    li $v0, 4
    la $a0, exponent_msg
    syscall
    lb $t0, exponent          # Cargar el exponente (en decimal)
    li $t1, 8                 # Contador de bits (8 bits para el exponente)
    li $t2, 0x80              # Máscara para extraer el bit más significativo (10000000 en binario)

display_exponent_loop:
    and $t3, $t0, $t2         # Aplicar la máscara para extraer el bit actual
    beqz $t3, display_zero    # Si el bit es 0, mostrar '0'
    li $a0, '1'               # Si el bit es 1, mostrar '1'
    j display_bit

display_zero:
    li $a0, '0'               # Mostrar '0'

display_bit:
    li $v0, 11                # Llamada al sistema para mostrar un carácter
    syscall
    srl $t2, $t2, 1           # Desplazar la máscara a la derecha
    addi $t1, $t1, -1         # Decrementar el contador de bits
    bnez $t1, display_exponent_loop  # Repetir hasta que se muestren los 8 bits

    li $v0, 4
    la $a0, newline
    syscall

    # Mostrar la mantisa en binario (24 bits, incluyendo el bit implícito)
    li $v0, 4
    la $a0, mantissa_msg
    syscall
    lw $t0, mantissa          # Cargar la mantisa
    li $t1, 24                # Contador de bits (24 bits para la mantisa, incluyendo el bit implícito)
    li $t2, 0x00800000        # Máscara para extraer el bit más significativo (bit 23)

display_mantissa_loop:
    and $t3, $t0, $t2         # Aplicar la máscara para extraer el bit actual
    beqz $t3, display_zero_mantissa  # Si el bit es 0, mostrar '0'
    li $a0, '1'               # Si el bit es 1, mostrar '1'
    j display_bit_mantissa

display_zero_mantissa:
    li $a0, '0'               # Mostrar '0'

display_bit_mantissa:
    li $v0, 11                # Llamada al sistema para mostrar un carácter
    syscall
    srl $t2, $t2, 1           # Desplazar la máscara a la derecha
    addi $t1, $t1, -1         # Decrementar el contador de bits
    bnez $t1, display_mantissa_loop  # Repetir hasta que se muestren los 24 bits

    li $v0, 4
    la $a0, newline
    syscall

    jr $ra

complete_zeros:
    li $a0, '0'               # Mostrar '0'
    li $v0, 11                # Llamada al sistema para mostrar un carácter
    syscall
    addi $t5, $t5, -1         # Decrementar el contador de ceros
    bnez $t5, complete_zeros  # Repetir hasta completar los ceros

    j end_mantissa

display_all_zeros:
    li $t5, 23                # Mostrar 23 ceros
display_all_zeros_loop:
    li $a0, '0'               # Mostrar '0'
    li $v0, 11                # Llamada al sistema para mostrar un carácter
    syscall
    addi $t5, $t5, -1         # Decrementar el contador de ceros
    bnez $t5, display_all_zeros_loop  # Repetir hasta completar los 23 ceros

end_mantissa:
    li $v0, 4
    la $a0, newline
    syscall

    jr $ra
